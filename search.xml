<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础</title>
      <link href="/2022/07/17/java/java-ji-chu/index.html"/>
      <url>/2022/07/17/java/java-ji-chu/index.html</url>
      
        <content type="html"><![CDATA[<p><code>JVM</code> :Java虚拟机，实现跨平台<br><code>JRE</code>=<code>JVM</code>+<code>类库</code>:Java运行时环境<br><code>JDK</code>=<code>JRE</code>+<code>开发工具包</code>:Java开发工具包  </p><p>根目录：表示项目<br>下一级的文件夹：模块<br>再下一级：包</p><h4 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h4><table><thead><tr><th align="center">键位</th><th>功能</th></tr></thead><tbody><tr><td align="center"><code>Ctrl</code> + <code>W</code></td><td>扩大选中范围</td></tr><tr><td align="center"><code>Ctrl</code> + <code>D</code></td><td>复制选中/未选中时复制行</td></tr><tr><td align="center"><code>Ctrl</code> + <code>O</code></td><td>覆盖/实现 <code>方法</code></td></tr><tr><td align="center"><code>Shift</code> + <code>Tab</code></td><td>取消一次缩进</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Y</code></td><td>删除行</td></tr><tr><td align="center"><code>Shift</code> + <code>Enter</code></td><td>下方添加新行</td></tr><tr><td align="center"><code>Alt</code> + <code>J</code></td><td>选中下一个匹配项</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>Alt</code></td><td>多选</td></tr><tr><td align="center"><code>Ctrl</code>+<code>Z</code> / <code>Ctrl</code>+<code>Shift</code>+<code>Z</code></td><td>撤销/恢复</td></tr><tr><td align="center"><code>Shift</code> + <code>Alt</code> + <code>up/down</code></td><td>上下移动行</td></tr></tbody></table><h5 id="程序开发步骤"><a href="#程序开发步骤" class="headerlink" title="程序开发步骤"></a>程序开发步骤</h5><ol><li>编写Java源程序</li><li><code>javac</code>(编译器) -&gt; 字节码文件(.class)</li><li><code>java</code>(解释器) -&gt; 在<code>JVM</code> 运行</li></ol><h1 id="Java-基础知识"><a href="#Java-基础知识" class="headerlink" title="Java 基础知识"></a>Java 基础知识</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote><p>Java中所有的数值类型字节数与平台无关  </p></blockquote><table><thead><tr><th>1字节</th><th>2字节</th><th>3字节</th><th>4字节</th></tr></thead><tbody><tr><td>byte</td><td>short</td><td>int(默认整型)</td><td>long(后缀<code>L/l</code>)</td></tr><tr><td>boolean</td><td>char</td><td>float(后缀<code>F/f</code>)</td><td>double(默认浮点,后缀<code>D/d</code>可省略)</td></tr></tbody></table><ul><li>Java没有无符号形式的整型，非要使用需将整型解释为无符号数<br>如：<code>Byte.toUnsignedInt(aByte)</code>  </li><li>float有效位数：6~7, double有效位数: 15</li><li>三个特殊的浮点值<br>  <code>Double.POSITIVE_INFINITY</code>: 正无穷<br>  <code>Double.NEGATIVE_INFINITY</code>: 负无穷<br>  <code>Double.NaN</code>: 非数  <ul><li>所有非数都不相等  </li><li><code>Double.isNaN(var)</code> 判断非数</li></ul></li><li>没有空字符，<code>‘’</code> 是错误的；有空字符串<code>""</code></li></ul><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class="line-numbers language-none"><code class="language-none">enum Name {        value1,        value2,        value3    };    &lt;!--声明--&gt;    Name ... = Name.value; 或者 Name ... = null;```  注：枚举是种特殊的类，不能在`方法`中定义      可作为类的`属性`，也可在`类外`    ### 类型转换- 自动类型转换      &lt;img src='../images/自动类型转换.png' width='600px'&gt;&lt;/img&gt;      &gt; 虚线表示精度会丢失          表达式运算时先要将操作数转换为同类型:      - 有double 转 `double`，否则    - 有float 转 `float`，否则    - 有long 转 `long` ，否则    - 转 `int`  - 强制类型转换  `(类型)变量名`&gt; 只有极少数情况需要将`boolean`转换为数值类型  &gt; 可使用表达式  `true/false?1:0`## 常变量  ### 变量- 声明      `类型 变量名;`- 初始化      `变量名 = 值;`- `Java10` 开始，  使用`var`  定义`局部变量`(不是类的属性) 可以从初始值推断其类型而不需要指明类型      - 必须是 `局部变量`    - `声明`和`初始化`在一起      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    var aCar = new Car();  相当于 Car aCar = new Car();    var c = true/false ? 123:"jiliguagua";    // 相当于true：int c = 123;    //      false: String c = "jiliguagua";<pre class="line-numbers language-none"><code class="language-none">### 常量  使用 `final` 关键字  &gt; `const` 是Java保留字，但并没有使用。定义常量用 `final`  ## 运算符- 算术运算符      - 一元      `++` `--` `+` `-`      - 二元      `*` `/` `%(好像除了Python，都是取余)` `+` `-`      - 关于`%`(这里只讨论除数为正(即**n为正数**))          &gt; 正数 % n，结果为 0 ~  (n-1)          &gt; 负数 % n，结果为 -(n-1) ~ 0                  在**保证逻辑**的前提下，          使结果总为**正**：`((x % n) + n) % n`          使结果总为**负**：`((x % n) - n) % n`          - `Math.floorMod(x, n)`实现了上述结果**总为正**的功能- 关系运算符  `&gt;` `&gt;=` `&lt;` `&lt;=` `==` `!=`  - 逻辑运算符  `!` `&amp;&amp;` `||` `?`  - 位运算符      - 位操作      `~` `&amp;` `|` `^`    - 位移位      `&lt;&lt;` `&gt;&gt;` `&gt;&gt;&gt;`  - 赋值运算符  `=` `+=` `-=` `*=` `/=` `%=` `...`  &gt; 复合型赋值运算符隐含**强制类型转换**  - 运算符优先级  &lt;img src='../images/优先级.png' width='900px'&gt;&lt;/img&gt;  ## 控制流  &gt; 块作用域：`{}`包裹的若干语句  &gt; `Java`不允许在**嵌套**的块作用域定义同名变量  &gt; `C++`可以，子块的变量会覆盖父块- 分支      - `if else`      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    if () {            } else if () {            } else {            }<pre class="line-numbers language-none"><code class="language-none">- `switch case`    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    switch () {        case 整型/char/String/enum: ...; break;        ...        default: ...    }<pre class="line-numbers language-none"><code class="language-none">    - 循环      - `while/do while`      do while 语句后有 `;`      `do {...} while ();`      - `for`      `for ( ; ; ) {}`      - 增强for循环      用来处理`数组/集合`      `for (变量:集合) {}`    &gt; Java不使用`,`运算符      &gt; `,`可在for语句的第1部分、第3部分`分隔`表达式  - `break` `continue` `goto` 以及 `标签语句`  Java中不使用 `goto`语句  ## 字符串  - UTF-16&lt;img src='../images/UTF-16.png' width='900px'&gt;&lt;/img&gt;  - 转义序列  `\uxxxx`，需引号包裹      &gt; Unicode转义序列在解析代码前处理，可改变程序结构  `"\u0022+\u0022"`并不是字符串`""`，在解析代码前`\u0022`会转换为`"`,因此代码变成了`""+""`,即两个空串相加概念上，字符串就是 `Unicode字符序列`      &gt; Java中字符串是**不可变**的      &gt; 各种字符串存放在公共的存储池中，String变量指向池中相应位置。      &gt; 如果复制一个字符串变量，两个变量指向相同位置- 长度  `.length()`- 改  子串：`String substring(int beginIndex, int endIndex)`  连接：`String join(String delimiter, String... elements)`  分隔：`String split(String str)`  重复：`String repeat(int count)`  大小写转换：`String toLowerCase()` `String toUpperCase()`  删除头尾部的字符，小于等于`U+0020`的字符(trim)；空格(strip)：`String trim()` `String strip()`  - 查   `int indexOf/lastIndexOf(String str, int fromIndex)`  `char charAt(int index)`  `boolean startsWith/endsWith(String str)`  `boolean equals/equalsIgnoreCase(String other)`  `int compareTo(String other)`  &gt; 检测相等一定不要使用`==`，该运算符只能确定两字符串是否在同一位置  &gt; 虽然同一位置的字符串一定相等，但完全有可能`内容相同的字符串在不同位置上`  - 增      1. s1 `+` s2      2. `String.join()`      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>        String all = String.join(" / ", "S", "M", "L", "XL");          // all: "S / M / L / XL"    <pre class="line-numbers language-none"><code class="language-none">    3. `repeat();`  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>    String repeated = "Java".repeat(3);      // repeated: "JavaJavaJava"    <pre class="line-numbers language-none"><code class="language-none">    4. 构建字符串：`StringBuilder`类  由大量较短的字符串构建字符串，如按键或文件中的单词，使用`+`效率很低：每次拼接，都会创建一个新的String对象  应按以下步骤进行：  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>    StringBuilder builder = new StringBuilder(); // 创建空的字符串构造器    builder.append(x)      builder.append(x);      ... // 添加内容x(整型、浮点型、布尔、对象都可以)到末尾      builder.insert(index, x) //添加到指定位置      builder.delete(start, end)    String allStr = builder.toString(); // 取出内容    <pre class="line-numbers language-none"><code class="language-none">- 空串与`null`  两者**概念不同**  `null`是一个特殊的对象  空串是`""`，长度为0，且没有内容  - APIs  &lt;img src='../images/API_String.png' width='900px'&gt;&lt;/img&gt;  ## 数组  数组存储**相同类型**的值的序列  一旦创建，就不能更改数组的**长度**  - 长度  `.length`- 创建数组   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>int[] arr = new int[length]; method( new int[]{1,3,4,} );//匿名简写//标准形式与其他形式不可同时使用<pre class="line-numbers language-none"><code class="language-none">数组的数组：  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>int[][] arr = new int [n1][n2]int[][]... arr = new int[][]{{...}, {...}} //匿名简写<pre class="line-numbers language-none"><code class="language-none">    - 数组的初始化：      整型：0      浮点型：0.0      boolean：false      char：空格      对象：null  - `Arrays`类  打印数组：`Arrays.toString(arr)`  打印数组的数组：`Arrays.deepToString(arr)`  &lt;img src='../images/API_Arrays.png' width='900px'&gt;&lt;/img&gt;    ## 数学函数  导入后，不需要前缀`Math`  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>import static java.lang.Math.*;</code></pre><pre class="line-numbers language-none"><code class="language-none">- 常量  `Math.PI`  `Math.E`- 常用函数   `Math.random()`  `Math.floor(.)` `Math.ceil(.)` `Math.round(.)`  `Math.abs(.)`  `Math.pow(x, y)` `Math.sqrt(.)`      - `Math.floorMod(x, y)`          对负数取余运算`%`的优化 - 三角函数及反函数      sin() asin()      cos() acos()      tan() atan() atan2()    - 指数函数及反函数      exp()      log()      log10()      ## 大数：`BigInteger`和`BigDecimal`  - 大数的创建  普通数值的转换：`BigInteger a = BigInteger.valueOf(100);`  对更大的数，使用字符串参数构建：  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>BigInteger realBig = new BigInteger("7546454354354354353453543543576898761213")```  </code></pre><ul><li>大数的运算<br>不能使用普通运算符<br><code>a.add(b)</code><br><code>a.subtract(b)</code><br><code>a.multiply(b)</code><br><code>a.divide(b)</code><br><code>a.mod(b)</code><br><code>a.sqrt(b)</code><br><code>a.compareTo(b)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/06/26/qian-duan/html/index.html"/>
      <url>/2022/06/26/qian-duan/html/index.html</url>
      
        <content type="html"><![CDATA[<h4 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h4><h5 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h5><ul><li>网页由哪些部分组成？ <code>文字、图片、音频、视频、超链接</code></li><li>浏览器是如何显示网页的？ <code>渲染引擎</code></li></ul><h5 id="五大浏览器"><a href="#五大浏览器" class="headerlink" title="五大浏览器"></a>五大浏览器</h5><p><img src="https://img1.baidu.com/it/u=4042717404,3682442615&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=500&amp;h=378" alt="五大浏览器"></p><h5 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h5><p>浏览器的内核： <code>渲染引擎</code><br>内核不同，解析相同代码时的 <strong>速度、性能、效果</strong> 也是不同的</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident(罪恶之源，被淘汰)</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>Firefox</td><td>Gecko</td><td>俗称Firefox内核</td></tr><tr><td>Safari</td><td>Webkit</td><td>苹果浏览器内核</td></tr><tr><td>Chrome/Opera/Edge</td><td>Blink</td><td>Blink其实是Webkit的分支，统称为Chromium/Chrome内核</td></tr></tbody></table><h5 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h5><p>Web标准的构成：<br><strong>结构</strong>：<code>HTML</code>    网页<strong>元素及内容</strong> <a href="https://whatwg-cn.github.io/html/">查看标准</a><br><strong>表现</strong>：<code>CSS</code> 网页<strong>元素的位置、外观</strong> <a href="https://www.w3.org/Style/CSS/">查看标准</a><br><strong>行为</strong>：<code>Javascript</code>   网页<strong>模型的定义及页面交互</strong> <a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">查看标准</a></p><h5 id="编码工具"><a href="#编码工具" class="headerlink" title="编码工具"></a>编码工具</h5><p>使用免费强大的文本编辑器 <a href="https://code.visualstudio.com/">VSCode</a>  </p><ul><li>常用快捷键</li></ul><table><thead><tr><th align="center">键位</th><th>功能</th></tr></thead><tbody><tr><td align="center"><code>Shift</code> + <code>up</code>/<code>down</code>/<code>left</code>/<code>right</code>/<code>PageUp</code>/<code>PageDown</code></td><td>多选</td></tr><tr><td align="center"><code>Ctrl</code> + <code>left</code>/<code>right</code></td><td>光标跨单词<strong>左右</strong>移动</td></tr><tr><td align="center"></td><td></td></tr><tr><td align="center"><code>Alt</code> + <code>up</code>/<code>down</code></td><td><strong>上/下</strong>移动当前行</td></tr><tr><td align="center"><code>Shift</code> + <code>Alt</code> + <code>up</code>/<code>down</code></td><td><strong>上/下</strong>复制当前行</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Enter</code></td><td>在下方插入空行</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>Enter</code></td><td>在上方插入空行</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>K</code></td><td>删除行</td></tr><tr><td align="center"></td><td></td></tr><tr><td align="center"><code>Ctrl</code> + <code>D</code></td><td>将下一个查找匹配项加入选中</td></tr><tr><td align="center"><code>Ctrl</code> + <code>U</code></td><td>撤销上次的选中</td></tr><tr><td align="center"></td><td></td></tr><tr><td align="center"><code>Ctrl</code> + <code>\</code></td><td>编辑器窗口拆分</td></tr><tr><td align="center"><code>Ctrl</code> + <code>/</code></td><td>行注释</td></tr><tr><td align="center"><code>Ctrl</code> + <code>Shift</code> + <code>/</code></td><td>块注释(原为<code>Shift</code>+<code>Alt</code>+<code>A</code>)</td></tr><tr><td align="center"><code>Ctrl</code> + <code>F</code></td><td>查找</td></tr><tr><td align="center"><code>Ctrl</code> + <code>H</code></td><td>替换</td></tr></tbody></table><hr><h5 id="HTML简单介绍"><a href="#HTML简单介绍" class="headerlink" title="HTML简单介绍"></a>HTML简单介绍</h5><ul><li>Web浏览器将解析标记，将文件转化为DOM树，包含若干种节点  </li><li>空格和换行会变成 <code>Text</code> 节点<blockquote><p>所有 <code>head</code> 的开始标签前的空白会被<strong>丢掉</strong>，所有 <code>body</code> 结束标签后的空白会被移到 <code>body</code> 尾部</p></blockquote></li></ul><h5 id="HTML元素的分类-Kinds-of-content"><a href="#HTML元素的分类-Kinds-of-content" class="headerlink" title="HTML元素的分类(Kinds of content)"></a>HTML元素的分类(Kinds of content)</h5><p>HTML中的每个元素都属于 <strong>0或多个</strong>类别，将具有相似特征的元素组合在一起</p><pre class="line-numbers language-none"><code class="language-none">一些元素也属于其他类别，这些类别在其他部分定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.postimg.cc/0ynQHqCw/gx.png" alt="gx.png"></p><pre><code>标题、节、交互式、嵌入 划分了标签的功能，短语、流 则体现了标签的位置情况  绝大部分标签都是 流      除了 元数据 的：title base style所有 嵌入 都是 短语(将短语分为 嵌入 和 短语(非嵌入) 两种)    有的嵌入是交互式的    有的短语是交互式的</code></pre><ul><li><p><strong>Heading 标题内容</strong><br>   <code>hgroup</code> <code>h1</code> <code>h2</code> <code>h3</code> <code>h4</code> <code>h5</code> <code>h6</code></p></li><li><p><strong>Sectioning 分段内容</strong><br>   <code>nav</code> <code>section</code> <code>article</code> <code>aside</code></p></li><li><p><strong>Metadata 元数据内容</strong><br>   <code>title</code> <code>base</code> <code>style</code> / <code>meta</code> <code>link</code> / <code>template</code> <code>script</code> <code>noscript</code>  </p><ul><li><strong>元数据内容中有些也可以是短语和流内容</strong><br>   <code>meta</code>(有 <code>itemprop</code> 属性)<br>   <code>link</code>(若 <code>body</code> 中允许使用)<br>   <code>template</code> <code>script</code> <code>noscript</code></li></ul></li><li><p><strong>Interactive 交互式内容</strong><br>   <code>details</code> / <code>a</code> <code>audio</code> <code>button</code> <code>embed</code> <code>iframe</code> <code>img</code> <code>input</code> <code>label</code> <code>select</code> <code>textarea</code> <code>video</code> </p></li><li><p><strong>Phrasing 短语内容</strong><br>短语内容包含所有的嵌入式，有些短语是交互式的，有些嵌入内容也是交互式的</p><ul><li><p><strong>Embedded 嵌入</strong><br>  <code>audio</code> <code>canvas</code> <code>embed</code> <code>iframe</code> <code>img</code>  <code>math</code> <code>object</code> <code>picture</code> <code>svg</code> <code>video</code>  </p><ul><li><strong>嵌入中的交互式内容</strong><br>  <code>audio</code>/<code>video</code>(有<code>controls</code>属性)<br>  <code>img</code>(有<code>usemap</code>属性)<br>  <code>embed</code> <code>iframe</code></li></ul></li><li><p><code>a</code> <code>abbr</code> <code>area</code> <code>b</code> <code>bdi</code> <code>bdo</code> <code>br</code> <code>button</code> <code>cite</code> <code>code</code> <code>data</code> <code>datalist</code> <code>del</code> <code>dfn</code> <code>em</code> <code>i</code> <code>input</code> <code>ins</code> <code>kbd</code> <code>label</code> <code>map</code> <code>mark</code> <code>meter</code> <code>output</code> <code>progress</code> <code>q</code> <code>ruby</code> <code>s</code> <code>samp</code> <code>select</code> <code>slot</code> <code>small</code> <code>span</code> <code>strong</code> <code>sub</code> <code>sup</code> <code>textarea</code> <code>time</code> <code>u</code> <code>var</code> <code>wbr</code> <code>自定义元素</code> <code>文本</code>  </p><ul><li><strong>短语中的交互式</strong><br>  <code>a</code>(有<code>href</code>属性)<br>  <code>input</code>(若<code>type</code>属性不是<code>hidden</code>状态)<br>  <code>button</code> <code>label</code> <code>select</code> <code>textarea</code></li></ul></li></ul></li><li><p><strong>Sectioning root 段根</strong><br>  <code>details</code> <code>body</code> <code>blockquote</code> <code>dialog</code> <code>fieldset</code> <code>figure</code> <code>td</code></p><ul><li><strong>段根中的交互式</strong><br>  <code>details</code></li></ul></li><li><p><strong>Flow 流内容</strong>  </p><ul><li><p>除了元数据中：<code>title</code> <code>base</code> <code>style</code> 的其它所有元素   </p></li><li><p><code>address</code> <code>blockquote</code> <code>details</code> <code>dialog</code> <code>div</code> <code>dl</code> <code>fieldset</code> <code>figure</code> <code>footer</code> <code>form</code> <code>header</code> <code>hr</code> <code>main</code> <code>menu</code> <code>ol</code> <code>p</code> <code>pre</code> <code>table</code> <code>ul</code></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Web标准 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章测试</title>
      <link href="/2022/06/23/uncategorized/hexo-bo-ke-wen-zhang-ce-shi/index.html"/>
      <url>/2022/06/23/uncategorized/hexo-bo-ke-wen-zhang-ce-shi/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h3><p>虽然不知道博客搭建的原理是什么<br>但我还是绞劲脑汁来找教程配置主题什么的<br>弄了差不多<strong>两天</strong>，累死我了<br>不过最重要的，还是<code>内容</code></p><ul><li>加油</li><li>卷？</li><li>太快了这知识更新</li><li>。。。、</li><li>这是列表中的一项    <pre class="line-numbers language-none"><code class="language-none">在这里写点东西吧---<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><p>以下是文档临摹。。。。<br>俺也想写出漂亮一点的文档，奈何自己总是学不会~<br>所以就只好<strong>临摹</strong>一下来<code>学习学习</code>  </p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>简单漂亮，文章内容美观易读</li><li>Material Design 设计</li><li>响应式设计吗，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换<code>Banner</code>图片</li><li>词云的标签页和<strong>雷达图</strong>的分类页  </li><li>。。。太多了后面的俺就不写了ovo</li></ul><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery不会这么完美。  </p><ul><li>@HarborZeng</li><li>@shw2018</li><li>@Licardo</li><li>@Five-great</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>本主题<strong>推荐您使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的Hexo博客了，建议你将Hexo升级到<br>最新稳定的版本。  </p><p>点击 <strong>这里</strong> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你<br>Hexo 的 <code>themes</code> 文件夹中即可。  </p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载：  </p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code>  </p><p><code>_config.yml</code> 文件的其他修改建议： </p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code> (如：<code>http://xxx.github.io</code>)。  </li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都<br>能较好地显示。  </li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h5 id="中文链接转拼音（-建议安装-）"><a href="#中文链接转拼音（-建议安装-）" class="headerlink" title="中文链接转拼音（ 建议安装 ）"></a>中文链接转拼音（ 建议安装 ）</h5><p>如果你的文章名称是中文的，那么Hexo默认生成的永久链接也会有中文，这样不利于 <code>SEO</code> ，且 <code>gitment</code> 评论<br>对中文链接也不支持。我们可以用 <strong>hexo-permalink-pinyin</strong> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增一下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">permalink_pinyin:    enable: true    separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：除了此插件外， hexo-abbrlink 插件也可以生成非中文的链接。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/22/uncategorized/hello-world/index.html"/>
      <url>/2022/06/22/uncategorized/hello-world/index.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
